


Tic tac toe  GAME 
#include <ctype.h>
#include <math.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

typedef struct
{
    char name[30];
    char symbol;
}
player;

const int N = 3;

char board[3][3] = {
    {'1', '2', '3'},
    {'4', '5', '6'},
    {'7', '8', '9'}
};

player players[2];

char COMPUTER_AI;

int numOfplayer, winner;

void delay(int seconds);
void information();
void draw_board();
void draw_line();
void two_player_gameplay();
int check_win();
int check_minimax_win();
void show_the_winner(int result);
void human_move();
void computer_move();
int minimax(int depth, bool isMaximizing);

int main(void)
{
    printf("Welcome to Tic-Tac-Toe game!\n\n");

    information(); 
    
    if (numOfplayer == 2)
    { 
        two_player_gameplay();
    }
    else
    {
        if (players[0].symbol == 'X')
        {
            human_move();
        }
        else
        {
            computer_move();
        }
    }

    return 0;
}

void human_move()
{
    int choice, found, result;
    char mark, char_choice;

    draw_board();

    do
    {
        printf("\t\t\t\t");
        printf("%s : ", players[0].name);
        scanf("%i", &choice);
    
        mark = players[0].symbol;
            
        found = 0;

        for (int row = 0; row < N; row++)
        {
            for (int col = 0; col < N; col++)
            {
                char_choice = choice + '0';
                    
                if (board[row][col] == char_choice)
                {
                    board[row][col] = mark;
                    found++;
                    
                    row = col = N;
                    break;
                }
            }
        }
    
    }
    while ((choice < 1 || choice > 9) || found == 0);
    
    result = check_win();
    if (result == 2)
    {
        computer_move();
    }
    else
    {
        show_the_winner(result);
    }
}

void computer_move()
{
    char board_number;
    int move_i, move_j;

    float bestScore = -INFINITY;

    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            if (board[i][j] != 'X' && board[i][j] != 'O')
            {
                board_number = board[i][j];

                board[i][j] = COMPUTER_AI;    
                float score = minimax(0, false);

                board[i][j] = board_number;

                if (score > bestScore)
                {
                    bestScore = score;
                    move_i = i;
                    move_j = j;
                }
            }           
        }
    }
    board[move_i][move_j] = COMPUTER_AI;
    
    int result = check_win();
    if (result == 2)
    {
        human_move();
    }
    else
    {
        show_the_winner(result);
    }
}

int minimax(int depth, bool isMaximizing)
{
    int result = check_minimax_win();
    if (result != 2)
    {
        return result;
    }

    if (isMaximizing)
    {
        float bestScore = -INFINITY;

        for (int row = 0; row < N; row++)
        {
            for (int col = 0; col < N; col++)
            {
                if (board[row][col] != 'X' && board[row][col] != 'O')
                {
                    char board_number = board[row][col];

                    board[row][col] = COMPUTER_AI;
                    float score = minimax(depth + 1, false);

                    board[row][col] = board_number;
                    
                    if (score > bestScore)
                    {
                        bestScore = score;
                    }
                }
            }
        }
        return bestScore;
    }

    else
    {
        float bestScore = INFINITY;

        for (int row = 0; row < N; row++)
        {
            for (int col = 0; col < N; col++)
            {
                if (board[row][col] != 'X' && board[row][col] != 'O')
                {
                    char board_number = board[row][col];

                    board[row][col] = players[0].symbol;
                    float score = minimax(depth + 1, true);
                    
                    board[row][col] = board_number;

                    if (score < bestScore)
                    {
                        bestScore = score;
                    }
                }
            }
        }
        return bestScore;
    }
}

void two_player_gameplay() 
{
    int player = 0;
    int choice, found, result;
    char mark, char_choice;
 
    do 
    {
        draw_board();

        printf("\t\t\t\t");
        printf("%s : ", players[player % 2].name);
        scanf("%i", &choice);

        mark = players[player % 2].symbol;

        for (int row = 0; row < N; row++) 
        {
            for (int col = 0; col < N; col++)
            {
                char_choice = choice + '0';
                
                if (board[row][col] == char_choice)
                {
                    board[row][col] = mark;
                    player++;

                    row = col = 3;
                    break;
                }
            }
        }

        result = check_win();
    } 
    while ((choice < 1 || choice > 9) || result == 2);

    draw_board();

    show_the_winner(result);
}

void information()
{
    do
    {
        printf("How many player will play (MAX is 2): ");
        scanf("%i", &numOfplayer);
    }
    while (numOfplayer > 2);
    printf("\n");

    if(numOfplayer < 2)
    {
        printf("Enter your name: ");
        scanf("%s", players[0].name);
        getchar();

        do
        {
            printf("X or O: ");
            scanf("%c", &players[0].symbol);
            getchar();
        }
        while (players[0].symbol != 'X' && players[0].symbol != 'O');    

        players[0].symbol = toupper(players[0].symbol);
        COMPUTER_AI = (players[0].symbol == 'X' ? 'O' : 'X');
    }
    else
    {
        for (int i = 0; i < 2; i++)
        {
            printf("Enter Player %i name: ", i + 1);
            scanf("%s", players[i].name);
            getchar();
            
            printf("\n");
        
        }
 
        players[0].symbol = toupper('X');
        players[1].symbol = ((toupper(players[0].symbol) == 'X') ? 'O' : 'X');
    }

    printf("\n\n");
}

int check_win()
{
    for (int i = 0; i < N; i++)
    {
        for (int j = 1; j <= 1; j++)
        {
            if (board[i][j - 1] == board[i][j] && board[i][j] == board[i][j + 1])
            {
                if (board[i][j] == 'X')
                {
                    return 1;
                }
                else
                {
                    return -1;
                }
            }
            else if (board[j - 1][i] == board[j][i] && board[j][i] == board[j + 1][i])
            {
                if (board[j][i] == 'X')
                {
                    return 1;
                }
                else
                {
                    return -1;
                }
            }
            else if (board[j - 1][j - 1] == board[j][j] && board[j][j] == board[j + 1][j + 1])
            {
                if (board[j][j] == 'X')
                {
                    return 1;
                }
                else
                {
                    return -1;
                }
            }
            else if (board[j - 1][j + 1] == board[j][j] && board[j][j] == board[j + 1][j - 1])
            {
                if (board[j][j] == 'X')
                {
                    return 1;
                }
                else
                {
                    return -1;
                }
            }
            else if (board[j - 1][j - 1] != '1' && board[j - 1][j] != '2' && board[j - 1][j + 1] != '3' && 
                     board[j][j - 1] != '4' && board[j][j] != '5' && board[j][j + 1] != '6' &&
                     board[j + 1][j - 1] != '7' && board[j + 1][j] != '8' && board[j + 1][j + 1] != '9')
                     {
                         return 0;
                     }
        }
    }
    return 2;
}
int check_minimax_win()
{
    for (int i = 0; i < N; i++)
    {
        for (int j = 1; j <= 1; j++)
        {
            if (board[i][j - 1] == board[i][j] && board[i][j] == board[i][j + 1])
            {
                if (players[0].symbol == 'O')
                {   
                    if (board[i][j] == 'X')
                    {
                        return 1;
                    }
                    else
                    {
                        return -1;
                    }
                }

                if (players[0].symbol == 'X')
                {
                    if (board[i][j] == 'X')
                    {
                        return -1;
                    }
                    else
                    {
                        return 1;
                    }
                }    
            }
            else if (board[j - 1][i] == board[j][i] && board[j][i] == board[j + 1][i])
            {
                if (players[0].symbol == 'O')
                {
                    if (board[j][i] == 'X')
                    {
                        return 1;
                    }
                    else
                    {
                        return -1;
                    }
                }

                if (players[0].symbol == 'X')
                {
                    if (board[j][i] == 'X')
                    {
                        return -1;
                    }
                    else
                    {
                        return 1;
                    }
                }    
            }
            else if (board[j - 1][j - 1] == board[j][j] && board[j][j] == board[j + 1][j + 1])
            {
                if (players[0].symbol == 'O')
                {
                    if (board[j][j] == 'X')
                    {
                        return 1;
                    }
                    else
                    {
                        return -1;
                    }
                }

                if (players[0].symbol == 'X')
                {
                    if (board[j][j] == 'X')
                    {
                        return -1;
                    }
                    else
                    {
                        return 1;
                    }
                }
            }
            else if (board[j - 1][j + 1] == board[j][j] && board[j][j] == board[j + 1][j - 1])
            {
                if (players[0].symbol == 'O')
                {
                    if (board[j][j] == 'X')
                    {
                        return 1;
                    }
                    else
                    {
                        return -1;
                    }
                }

                if (players[0].symbol == 'X')
                {
                    if (board[j][j] == 'X')
                    {
                        return -1;
                    }
                    else
                    {
                        return 1;
                    }
                }    
            }
            else if (board[j - 1][j - 1] != '1' && board[j - 1][j] != '2' && board[j - 1][j + 1] != '3' && 
                     board[j][j - 1] != '4' && board[j][j] != '5' && board[j][j + 1] != '6' &&
                     board[j + 1][j - 1] != '7' && board[j + 1][j] != '8' && board[j + 1][j + 1] != '9')
                     {
                         return 0;
                     }
        }
    }
    return 2;
}

void show_the_winner(int result)
{
    if (numOfplayer < 2)
    {
        if ((players[0].symbol == 'X' && result == 1) || (players[0].symbol == 'O' && result == -1))
        {
            draw_board();
            printf("\n\t\t\t\t\t    ---THE WINNER IS %s---\n\n\n", players[0].name);
        }
        else if (result == -1 || result == 1)
        {
            draw_board();
            printf("\n\t\t\t\t\t\t ---YOU LOSE---\n\n\n");
        }
        else 
        {
            draw_board();
            printf("\n\t\t\t\t\t     ---THE GAME IS DRAW---\n\n\n");
        }
    }
    else
    {
        for (int i = 0; i < 2; i++)
        {
            if (result == 1) 
            {
                if (players[i].symbol == 'X')
                {
                    printf("\n\t\t\t\t\t    ---THE WINNER IS %s---\n\n\n", players[i].name);
                    break;
                }
            }
            if (result == -1) 
            {
                if (players[i].symbol == 'O')
                {
                    printf("\n\t\t\t\t\t    ---THE WINNER IS %s---\n\n\n", players[i].name);
                    break;
                }
            }
            if (result == 0)
            {
                printf("\n\t\t\t\t\t     ---THE GAME IS DRAW---\n\n\n");
                break;
            }
        }
    }
}

void draw_board()
{
    system("clear");

    printf("\n\n");
    printf("\t\t\t\tEnter the number on board to choose your place!\n\n\n");

    if (numOfplayer < 2)
    {
        printf("\t\t\t\t");
        printf("%s : %c", players[0].name, toupper(players[0].symbol));
    }
    else
    {
        printf("\t\t\t\t");
        printf("(Player 1) %s : %c\n", players[0].name, toupper(players[0].symbol));
        printf("\t\t\t\t");
        printf("(Player 2) %s : %c\n", players[1].name, toupper(players[1].symbol));
    }
    printf("\n\n");

    for (int row = 0; row < N; row++)
    {
        for (int col = 0; col < N; col++)
        {
            if (col == 0)
            {
                printf("\t\t\t\t\t\t");
                printf("     |     |     ");
                printf("\n");
                printf("\t\t\t\t\t\t");
            }
            
            printf("  %c  ", board[row][col]);

            if (col != 2)
            {
                printf("|");
            }
            
        }
        printf("\n");

        if (row != 2)
        {
            printf("\t\t\t\t\t\t");
            printf("_____|_____|_____");
            printf("\n");
        }

        if (row == 2)
        {
            printf("\t\t\t\t\t\t");
            printf("     |     |     ");
            printf("\n");  
        }
    }
    printf("\n\n");
}
